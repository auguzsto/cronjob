<?php

use Auguzsto\Cronjob\Scheduler;
use Auguzsto\Job\Job;
use Auguzsto\Job\Worker;
use Auguzsto\Cronjob\Cronjob;


$autoload = __DIR__ . "/../vendor/autoload.php";

if (!file_exists($autoload)) {
    $autoload = $GLOBALS['_composer_autoload_path'];
}

require_once $autoload;

$commands = [
    1 => "start",
    2 => "create",
    3 => "stop",
    4 => "schedules",
    5 => "errors"
];

$input = $argv[1];
if (array_search($input, $commands, true)) {
    $output = $argv[1]($argv);
    echo $output . PHP_EOL;
    exit;
} else {
    echo "Oops... Looks like you typed something wrong. That command doesn't exist." . PHP_EOL;
    exit;
}

function start(array $argv = []): string
{
    if (empty($_SERVER["CRONJOB_TASKS_DIR"])) {
        return "Error: Environment variable 'CRONJOB_TASKS_DIR' is not set.";
    }

    if (!is_dir($_SERVER["CRONJOB_TASKS_DIR"])) {
        return "Error: Task folder not found.";
    }

    $job = new Job(Cronjob::class, "up");
    $job->execute();
    return "All ready!";
}

function create(array $argv = []): string
{
    if (empty($_SERVER["CRONJOB_TASKS_DIR"])) {
        return "Error: Environment variable 'CRONJOB_TASKS_DIR' is not set.";
    }

    if (!is_dir($_SERVER["CRONJOB_TASKS_DIR"])) {
        return "Error: Task folder not found.";
    }

    $dirtask = $_SERVER["CRONJOB_TASKS_DIR"];
    $name = $argv[2];
    $scalfold = <<<END
    <?php

    use Auguzsto\Cronjob\TaskInterface;
    use Auguzsto\Cronjob\SchedulerInterface;

    class $name implements TaskInterface
    {
        /**
         * Schedule
         * \$scheduler->on("* * * * *", new self);
         */
        public static function toScheduler(SchedulerInterface \$scheduler): void 
        {
        }

        /**
         * Implement the task to be performed
         */
        public static function onTask(): void
        {
        }
    }
    END;
    file_put_contents("$dirtask/$name.php", $scalfold);
    return "Task $name created: $dirtask/$name.php";
}

function stop(array $argv = []): string
{
    Worker::down();
    return "All stopped!";
}

function schedules(array $argv = []): string
{
    $task = $argv[2];
    $results = Scheduler::all($task);

    if (empty($results)) {
        return "$task not found in scheduler.";
    }

    return json_encode($results);
}

function errors(array $argv = []): string
{
    $errors = Scheduler::errors();
    if ($errors == null) {
        exit;
    }

    return $errors;
}